{"ast":null,"code":"/** @format */\n// Firebase App (the core Firebase SDK) is always required and\n// must be listed before other Firebase SDKs\nimport firebase, { firestore } from 'firebase/app'; // Add the Firebase services that you want to use\n\nimport 'firebase/auth';\nimport 'firebase/firestore'; // TODO: Replace the following with your app's Firebase project configuration\n// For Firebase JavaScript SDK v7.20.0 and later, `measurementId` is an optional field\n\nconst firebaseConfig = {\n  apiKey: 'AIzaSyDHWOXbyk0nwKOojf64jIZohJgqePtJgSM',\n  authDomain: 'crown-65cf0.firebaseapp.com',\n  databaseURL: 'https://crown-65cf0.firebaseio.com',\n  projectId: 'crown-65cf0',\n  storageBucket: 'crown-65cf0.appspot.com',\n  messagingSenderId: '925472468806',\n  appId: '1:925472468806:web:1c2132c8be289027fdff47'\n}; // Initialize Firebase\n\nfirebase.initializeApp(firebaseConfig);\nexport const fireStore = firebase.firestore();\nexport const createDataBaseForUser = async (user, otherData) => {\n  const userRef = fireStore.collection('users').doc(`${user.uid}`);\n  const userSnapShot = await userRef.get();\n\n  if (userSnapShot.exists) {\n    return userRef;\n  } else {\n    const {\n      displayName,\n      email\n    } = user;\n    userRef.set({\n      displayName,\n      email,\n      createdAt: new Date(),\n      ...otherData\n    });\n    return userRef;\n  }\n};\nexport const createDataBase = collectionArray => {\n  collectionArray.forEach(item => {\n    fireStore.collection('collections').doc(`${item.title}`).set({ ...item\n    });\n  });\n};\nexport const fetchCollectionsFromFireStore = async () => {\n  fireStore.collection('collections').get().then(function (querySnapshot) {\n    querySnapshot.forEach(function (doc) {\n      // doc.data() is never undefined for query doc snapshots\n      console.log(doc.id, ' => ', doc.data());\n    });\n  });\n};\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const googleSignIn = () => firebase.auth().signInWithPopup(provider);\nexport const auth = firebase.auth();","map":{"version":3,"sources":["C:/Users/admin/Desktop/master/crown-master/src/firabase/fireBaseUtils.js"],"names":["firebase","firestore","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","initializeApp","fireStore","createDataBaseForUser","user","otherData","userRef","collection","doc","uid","userSnapShot","get","exists","displayName","email","set","createdAt","Date","createDataBase","collectionArray","forEach","item","title","fetchCollectionsFromFireStore","then","querySnapshot","console","log","id","data","provider","auth","GoogleAuthProvider","setCustomParameters","prompt","googleSignIn","signInWithPopup"],"mappings":"AAAA;AAEA;AACA;AACA,OAAOA,QAAP,IAAmBC,SAAnB,QAAoC,cAApC,C,CAEA;;AACA,OAAO,eAAP;AACA,OAAO,oBAAP,C,CAEA;AACA;;AACA,MAAMC,cAAc,GAAG;AACtBC,EAAAA,MAAM,EAAE,yCADc;AAEtBC,EAAAA,UAAU,EAAE,6BAFU;AAGtBC,EAAAA,WAAW,EAAE,oCAHS;AAItBC,EAAAA,SAAS,EAAE,aAJW;AAKtBC,EAAAA,aAAa,EAAE,yBALO;AAMtBC,EAAAA,iBAAiB,EAAE,cANG;AAOtBC,EAAAA,KAAK,EAAE;AAPe,CAAvB,C,CASA;;AACAT,QAAQ,CAACU,aAAT,CAAuBR,cAAvB;AAEA,OAAO,MAAMS,SAAS,GAAGX,QAAQ,CAACC,SAAT,EAAlB;AAEP,OAAO,MAAMW,qBAAqB,GAAG,OAAOC,IAAP,EAAaC,SAAb,KAA2B;AAC/D,QAAMC,OAAO,GAAGJ,SAAS,CAACK,UAAV,CAAqB,OAArB,EAA8BC,GAA9B,CAAmC,GAAEJ,IAAI,CAACK,GAAI,EAA9C,CAAhB;AACA,QAAMC,YAAY,GAAG,MAAMJ,OAAO,CAACK,GAAR,EAA3B;;AAEA,MAAID,YAAY,CAACE,MAAjB,EAAyB;AACxB,WAAON,OAAP;AACA,GAFD,MAEO;AACN,UAAM;AAAEO,MAAAA,WAAF;AAAeC,MAAAA;AAAf,QAAyBV,IAA/B;AACAE,IAAAA,OAAO,CAACS,GAAR,CAAY;AACXF,MAAAA,WADW;AAEXC,MAAAA,KAFW;AAGXE,MAAAA,SAAS,EAAE,IAAIC,IAAJ,EAHA;AAIX,SAAGZ;AAJQ,KAAZ;AAMA,WAAOC,OAAP;AACA;AACD,CAhBM;AAkBP,OAAO,MAAMY,cAAc,GAAIC,eAAD,IAAqB;AAClDA,EAAAA,eAAe,CAACC,OAAhB,CAAyBC,IAAD,IAAU;AACjCnB,IAAAA,SAAS,CACPK,UADF,CACa,aADb,EAEEC,GAFF,CAEO,GAAEa,IAAI,CAACC,KAAM,EAFpB,EAGEP,GAHF,CAGM,EACJ,GAAGM;AADC,KAHN;AAMA,GAPD;AAQA,CATM;AAWP,OAAO,MAAME,6BAA6B,GAAG,YAAY;AACxDrB,EAAAA,SAAS,CACPK,UADF,CACa,aADb,EAEEI,GAFF,GAGEa,IAHF,CAGO,UAAUC,aAAV,EAAyB;AAC9BA,IAAAA,aAAa,CAACL,OAAd,CAAsB,UAAUZ,GAAV,EAAe;AACpC;AACAkB,MAAAA,OAAO,CAACC,GAAR,CAAYnB,GAAG,CAACoB,EAAhB,EAAoB,MAApB,EAA4BpB,GAAG,CAACqB,IAAJ,EAA5B;AACA,KAHD;AAIA,GARF;AASA,CAVM;AAYP,MAAMC,QAAQ,GAAG,IAAIvC,QAAQ,CAACwC,IAAT,CAAcC,kBAAlB,EAAjB;AACAF,QAAQ,CAACG,mBAAT,CAA6B;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAA7B;AAEA,OAAO,MAAMC,YAAY,GAAG,MAAM5C,QAAQ,CAACwC,IAAT,GAAgBK,eAAhB,CAAgCN,QAAhC,CAA3B;AACP,OAAO,MAAMC,IAAI,GAAGxC,QAAQ,CAACwC,IAAT,EAAb","sourcesContent":["/** @format */\r\n\r\n// Firebase App (the core Firebase SDK) is always required and\r\n// must be listed before other Firebase SDKs\r\nimport firebase, { firestore } from 'firebase/app';\r\n\r\n// Add the Firebase services that you want to use\r\nimport 'firebase/auth';\r\nimport 'firebase/firestore';\r\n\r\n// TODO: Replace the following with your app's Firebase project configuration\r\n// For Firebase JavaScript SDK v7.20.0 and later, `measurementId` is an optional field\r\nconst firebaseConfig = {\r\n\tapiKey: 'AIzaSyDHWOXbyk0nwKOojf64jIZohJgqePtJgSM',\r\n\tauthDomain: 'crown-65cf0.firebaseapp.com',\r\n\tdatabaseURL: 'https://crown-65cf0.firebaseio.com',\r\n\tprojectId: 'crown-65cf0',\r\n\tstorageBucket: 'crown-65cf0.appspot.com',\r\n\tmessagingSenderId: '925472468806',\r\n\tappId: '1:925472468806:web:1c2132c8be289027fdff47',\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport const fireStore = firebase.firestore();\r\n\r\nexport const createDataBaseForUser = async (user, otherData) => {\r\n\tconst userRef = fireStore.collection('users').doc(`${user.uid}`);\r\n\tconst userSnapShot = await userRef.get();\r\n\r\n\tif (userSnapShot.exists) {\r\n\t\treturn userRef;\r\n\t} else {\r\n\t\tconst { displayName, email } = user;\r\n\t\tuserRef.set({\r\n\t\t\tdisplayName,\r\n\t\t\temail,\r\n\t\t\tcreatedAt: new Date(),\r\n\t\t\t...otherData,\r\n\t\t});\r\n\t\treturn userRef;\r\n\t}\r\n};\r\n\r\nexport const createDataBase = (collectionArray) => {\r\n\tcollectionArray.forEach((item) => {\r\n\t\tfireStore\r\n\t\t\t.collection('collections')\r\n\t\t\t.doc(`${item.title}`)\r\n\t\t\t.set({\r\n\t\t\t\t...item,\r\n\t\t\t});\r\n\t});\r\n};\r\n\r\nexport const fetchCollectionsFromFireStore = async () => {\r\n\tfireStore\r\n\t\t.collection('collections')\r\n\t\t.get()\r\n\t\t.then(function (querySnapshot) {\r\n\t\t\tquerySnapshot.forEach(function (doc) {\r\n\t\t\t\t// doc.data() is never undefined for query doc snapshots\r\n\t\t\t\tconsole.log(doc.id, ' => ', doc.data());\r\n\t\t\t});\r\n\t\t});\r\n};\r\n\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\nprovider.setCustomParameters({ prompt: 'select_account' });\r\n\r\nexport const googleSignIn = () => firebase.auth().signInWithPopup(provider);\r\nexport const auth = firebase.auth();\r\n"]},"metadata":{},"sourceType":"module"}